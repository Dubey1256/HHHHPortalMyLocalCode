import * as React from 'react'
import { Web } from "sp-pnp-js";
import { useEffect, useState } from 'react';
import { ColumnDef } from '@tanstack/react-table';
import { PeoplePicker, PrincipalType } from "@pnp/spfx-controls-react/lib/PeoplePicker";
import GlobalCommanTable from '../../../globalComponents/GroupByReactTableComponents/GlobalCommanTable';
import { Panel, PanelType } from '@fluentui/react/lib/Panel';
import { ContextualMenu, IContextualMenuItem, Icon } from '@fluentui/react';
import ImagesC from "../../EditPopupFiles/ImageInformation";
import { DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';
import "bootstrap/js/dist/tab";
import Modal from "react-bootstrap/Modal";
import Button from "react-bootstrap/Button";

const TaskUserManagementTable = ({ TaskUsersListData, TaskGroupsListData, baseUrl, TaskUserListId, context, fetchAPIData, smartMetaDataItems }: any) => {
    const [data, setData] = React.useState([]);
    const [groupData, setGroupData] = useState([]);
    const [title, setTitle] = useState("");
    const [suffix, setSuffix] = useState("");
    const [selectedApprovalType, setSelectedApprovalType] = useState('');
    const [selectedCompany, setSelectedCompany] = useState('');
    const [selectedRoles, setSelectedRoles] = useState<any>([]);
    const [userGroup, setUserGroup] = useState("");
    const [userCategory, setUserCategory] = useState("");
    const [imageUrl, setImageUrl] = useState<any>({});
    const [EditData, setEditData] = React.useState<any>({});
    const [isActive, setIsActive] = useState(false);
    const [isTaskNotifications, setIsTaskNotifications] = useState(false);
    const [assignedToUser, setAssignedToUser] = useState<any>([]);
    const [approver, setApprover] = useState([]);
    const [sortOrder, setSortOrder] = useState("");
    const [openPopup, setOpenPopup] = useState(false);
    const [openGroupPopup, setOpenGroupPopup] = useState(false);
    const [openUpdateGroupPopup, setOpenUpdateGroupPopup] = useState(false);
    const [openUpdateMemberPopup, setOpenUpdateMemberPopup] = useState(false);
    // const [show, setShow] = useState(false);
    const [showConfirmationModal, setShowConfirmationModal] = useState(false);
    const [itemToDelete, setItemToDelete] = useState(null);
    const [itemToUpdate, setItemToUpdate] = useState(null);
    const [memberToUpdate, setMemberToUpdate] = useState(null);
    const [autoSuggestData, setAutoSuggestData] = useState(null);
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [searchedProjectKey, setSearchedProjectKey] = React.useState("");

    const Categories: any = (smartMetaDataItems.filter((items: any) => items.TaxType === "TimesheetCategories"))
    const uniqueCategories = Categories.filter(
        (ele: any, i: any, item: any) => item.findIndex((elem: any) => (elem.Title === ele.Title)) === i
    );
    console.log(Categories)
    console.log(uniqueCategories)

    const TaxTypeCategories: any = (smartMetaDataItems.filter((items: any) => items.TaxType === "Categories"))

    // When the member to update is set, initialize the selected company and roles
    useEffect(() => {
        if (memberToUpdate) {
            setSelectedApprovalType(memberToUpdate.IsApprovalMail);
            setSelectedCompany(memberToUpdate.Company);
            // setSelectedRoles(memberToUpdate.Role || []);
            setSelectedRoles(Array.isArray(memberToUpdate.Role) ? memberToUpdate.Role : []);
            setIsActive(memberToUpdate.IsActive);
            setIsTaskNotifications(memberToUpdate.IsTaskNotifications);
            setUserCategory(memberToUpdate.TimeCategory)
        }
    }, [memberToUpdate]);

    const handleApprovalTypeChange = (e: any) => {
        setSelectedApprovalType(e.target.value);
    };

    // Function to handle company selection
    const handleCompanyChange = (e: any) => {
        setSelectedCompany(e.target.value);
    };

    // Function to handle roles selection
    const handleRoleChange = (role: any) => {
        setSelectedRoles((prevSelectedRoles: any) =>
            prevSelectedRoles.includes(role)
                ? prevSelectedRoles.filter((r: any) => r !== role)
                : [...prevSelectedRoles, role]
        );
    };

    console.log(context)

    useEffect(() => {
        setData(TaskUsersListData);
        setGroupData(TaskGroupsListData);
    }, [TaskUsersListData, TaskGroupsListData]);

    const handleDeleteClick = (item: any) => {
        setItemToDelete(item);
        setShowConfirmationModal(true);
    };

    const handleUpdateMemberClick = (item: any) => {
        setMemberToUpdate(item);
        setOpenUpdateMemberPopup(true);
    };

    const handleUpdateClick = (item: any) => {
        setItemToUpdate(item);
        setOpenUpdateGroupPopup(true);
    };

    const addTeamMember = async () => {
        let web = new Web(baseUrl);
        await web.lists.getById(TaskUserListId).items.add({
            Title: title,
            ItemType: "User",
            Company: "Smalsus",
            IsActive: false,
            IsTaskNotifications: false,
        }).then((res: any) => {
            console.log(res);
            const newItem = res.data;
            setData(prevData => [...prevData, newItem]);
            setTitle("");
            setOpenPopup(false);
        })
    }

    const addNewGroup = async () => {
        let web = new Web(baseUrl);
        await web.lists.getById(TaskUserListId).items.add({
            Title: title,
            Suffix: suffix,
            SortOrder: sortOrder,
            ItemType: "Group"
        }).then((res: any) => {
            console.log(res);
            const newItem = res.data;
            setGroupData(prevData => [...prevData, newItem]);
            setTitle("");
            setSuffix("");
            setSortOrder("");
            setOpenGroupPopup(false);
        })
    }

    const deleteTeamMember = async () => {
        let web = new Web(baseUrl);
        if (itemToDelete) {
            await web.lists.getById(TaskUserListId).items.getById(itemToDelete.Id).recycle()
                .then(i => {
                    console.log(i);
                    setData(prevData => prevData.filter(item => item.Id !== itemToDelete.Id));
                    setGroupData(prevData => prevData.filter(item => item.Id !== itemToDelete.Id));
                    setItemToDelete(null);
                    setShowConfirmationModal(false);
                });
        }
    }

    const updateUser = async () => {
        let web = new Web(baseUrl);
        if (memberToUpdate) {
            const updatedData = {
                Title: title ? title : memberToUpdate.Title,
                Suffix: suffix ? suffix : memberToUpdate.Suffix,
                SortOrder: sortOrder ? sortOrder : memberToUpdate.SortOrder,
                IsActive: isActive,
                Company: selectedCompany,
                TimeCategory: userCategory ? userCategory : memberToUpdate.userCategory,
                Role: { "results": selectedRoles },
                IsTaskNotifications: isTaskNotifications,
                AssingedToUserId: assignedToUser.length > 0 ? assignedToUser[0]?.AssingedToUser?.Id : null,
                ApproverId: approver.length > 0 ? { "results": [approver[0]?.AssingedToUser.Id] } : null,
                UserGroupId: userGroup ? parseInt(userGroup) : memberToUpdate?.UserGroup?.Id,
                Item_x0020_Cover: { "__metadata": { type: "SP.FieldUrlValue" }, Description: "Description", Url: imageUrl?.Item_x002d_Image != undefined ? imageUrl?.Item_x002d_Image?.Url : (imageUrl?.Item_x0020_Cover != undefined ? imageUrl?.Item_x0020_Cover?.Url : null) },
                CategoriesItemsJson: JSON.stringify(selectedCategories),
            };

            await web.lists.getById(TaskUserListId).items.getById(memberToUpdate.Id).update(updatedData).then((res: any) => {
                console.log('Updated Data:', updatedData);

                // Update the data and groupData states
                const updatedMemberData = data.map(item => {
                    if (item.Id === memberToUpdate.Id) {
                        return { ...item, ...updatedData };
                    }
                    return item;
                });

                setData(updatedMemberData);
                // Update memberToUpdate state if necessary
                setMemberToUpdate((prevState: any) => ({ ...prevState, ...updatedData }));

                setOpenUpdateMemberPopup(false);
                fetchAPIData()
            }).catch(error => {
                console.error("Error updating item: ", error);
            });
        }
    };



    const updateGroup = async () => {
        let web = new Web(baseUrl);
        if (itemToUpdate) {
            await web.lists.getById(TaskUserListId).items.getById(itemToUpdate.Id).update({
                Title: title ? title : itemToUpdate.Title,
                Suffix: suffix ? suffix : itemToUpdate.Suffix,
                SortOrder: sortOrder ? sortOrder : itemToUpdate.SortOrder,
            }).then((res: any) => {
                console.log(res);
                setGroupData(prevData => prevData.map(item => {
                    if (item.Id === itemToUpdate.Id) {
                        return {
                            ...item,
                            Title: title ? title : item.Title,
                            Suffix: suffix ? suffix : item.Suffix,
                            SortOrder: sortOrder ? sortOrder : item.SortOrder,
                            // AssingedToUserId: assignedToGroup.length > 0 ? assignedToGroup[0]?.Id : null,
                        };
                    }
                    return item;
                }));
                setOpenUpdateGroupPopup(false);
            }).catch(error => {
                console.error("Error updating item: ", error);
            });
        }
    }

    const columns = React.useMemo<ColumnDef<any, unknown>[]>(
        () => [{
            accessorFn: '',
            canSort: false,
            placeholder: '',
            header: '',
            id: 'row.original',
            size: 10,
        },
        {
            accessorKey: 'Title',
            header: "",
            placeholder: "Search Name",
            id: "Title",
            cell: ({ row }: any) => (
                <div style={{ display: 'flex', alignItems: 'center' }}>
                    <img
                        className='workmember'
                        src={row.original.Item_x0020_Cover?.Url || 'https://hhhhteams.sharepoint.com/sites/HHHH/GmBH/SiteCollectionImages/ICONS/32/icon_user.jpg'}
                        alt="User"
                        style={{ marginRight: '10px', width: '32px', height: '32px' }}
                    />
                    <span>{row.original.Title}</span>
                </div>
            ),
            sortDescFirst: false
        },
        {
            accessorKey: "UserGroup.Title",
            header: "",
            id: "Group",
            placeholder: "Search Group"
        },
        {
            accessorKey: "TimeCategory",
            header: "",
            id: "Category",
            placeholder: "Search Category",
            size: 80,
        },
        {
            accessorKey: "SortOrder",
            header: "",
            id: "SortOrder",
            placeholder: "SortOrder",
            size: 42,
        },
        {
            accessorKey: "Role",
            header: "",
            id: "Role",
            placeholder: "Roles",
        },
        {
            accessorKey: "Company",
            header: "",
            id: "Company",
            placeholder: "Company",
            size: 70,
        },
        {
            accessorFn: (row) => row.Approver?.[0]?.Title || '',
            header: "",
            id: 'Approver',
            placeholder: "Approver"
        },
        {
            accessorKey: "technicalGroup",
            header: "",
            id: 'technicalGroup',
            placeholder: "Team",
            size: 75,
        },
        {
            id: "TaskId",
            accessorKey: "TaskId",
            header: null,
            size: 50,
            cell: (info) => (<div className='pull-right alignCenter'>
                <span onClick={() => handleUpdateMemberClick(info.row.original)} className='svg__iconbox svg__icon--edit' title='Edit'></span>
                <span onClick={() => handleDeleteClick(info.row.original)} className='svg__iconbox svg__icon--trash' title='Trash'></span>
            </div>),
            enableColumnFilter: false,
            enableSorting: false,
        }
        ],
        [data]
    )

    const columns2 = React.useMemo<ColumnDef<any, unknown>[]>(
        () => [
            {
                accessorKey: 'Title',
                id: "Title",
                header: "",
                placeholder: "Title",
                sortDescFirst: false
            },
            {
                accessorKey: "SortOrder",
                header: "",
                placeholder: "Sort Order"
            },
            {
                accessorKey: "TaskId",
                header: null,
                cell: (info) => (<div className='pull-right alignCenter'>
                    <span onClick={() => handleUpdateClick(info.row.original)} className='svg__iconbox svg__icon--edit' title='Edit'></span>
                    <span onClick={() => handleDeleteClick(info.row.original)} className='svg__iconbox svg__icon--trash' title='Trash'></span>
                </div>),
                enableColumnFilter: false,
                enableSorting: false,
                Size: 60
            }
        ],
        [groupData]
    )

    const userIdentifier = memberToUpdate?.AssingedToUser?.Name;
    const email = userIdentifier ? userIdentifier.split('|').pop() : '';

    const userIdentifier2 = memberToUpdate?.Approver?.[0]?.Name;
    const email2 = userIdentifier2 ? userIdentifier2.split('|').pop() : '';

    const callBackData = React.useCallback((elem: any, ShowingData: any) => {

    }, []);

    const imageTabCallBack = React.useCallback((data: any) => {
        setEditData(data);
        console.log(EditData);
        console.log(data);
        // setEditdocumentsData(data);
    }, []);

    const AssignedToUser = (item: any) => {
        if (item.length > 0) {
            const email = item.length > 0 ? item[0].loginName.split('|').pop() : null;
            const member = data.filter((elem: any) => elem.Email === email)
            setAssignedToUser(member)
        }
        else {
            setAssignedToUser([])
        }
    }

    const ApproverFunction = (item: any) => {
        if (item.length > 0) {
            const email = item.length > 0 ? item[0].loginName.split('|').pop() : null;
            const member = data.filter((elem: any) => elem.Email === email)
            setApprover(member)
        }
        else {
            setApprover([])
        }
    }

    const autoSuggestionsForTitle = (e: any) => {
        let SearchedKeyWord: any = e.target.value;
        let TempArray: any = [];
        if (SearchedKeyWord.length > 0) {
            if (data != undefined && data?.length > 0) {
                data.map((AllDataItem: any) => {
                    if (
                        AllDataItem?.Title?.toLowerCase()?.includes(
                            SearchedKeyWord.toLowerCase()
                        )
                    ) {
                        TempArray.push(AllDataItem);
                    }
                });
            }
            if (TempArray != undefined && TempArray.length > 0) {
                setAutoSuggestData(TempArray);
                setSearchedProjectKey(SearchedKeyWord);
            }
        } else {
            setAutoSuggestData([]);
        }
    };


    const buildHierarchy = (categories: any) => {
        const rootCategories = categories.filter((c: any) => c.ParentID === 0);
        const findChildren = (parent: any) => {
            const children = categories.filter((c: any) => c.ParentID === parent.ID);
            if (children.length > 0) {
                parent.children = children.map((child: any) => findChildren(child));
            }
            return parent;
        };
        return rootCategories.map((rootCategory: any) => findChildren(rootCategory));
    };

    const createMenuProps = (categories: any) => {
        const buildNestedItems = (category: any) => {
            return {
                key: category.Id,
                text: category.Title,
                subMenuProps: category.children && {
                    items: category.children.map(buildNestedItems), // recursively build children
                },
                onClick: () => handleCategoryClick(category),
            };
        };

        return {
            items: categories.map(buildNestedItems),
        };
    };

    const handleCategoryClick = (category: any) => {
        // Check if the category is already selected
        const isCategorySelected = selectedCategories.some(c => c.Id === category.Id);

        if (isCategorySelected) {
            // If already selected, remove it and all its children
            const removeCategoryAndChildren = (cat: any) => {
                let newSelectedCategories = selectedCategories.filter(c => c.Id !== cat.Id);
                if (cat.children) {
                    cat.children.forEach((child: any) => {
                        newSelectedCategories = removeCategoryAndChildren(child);
                    });
                }
                return newSelectedCategories;
            };

            setSelectedCategories(prevCategories => removeCategoryAndChildren(category));
        } else {
            // If not selected, add it and make sure to remove any children from selection
            setSelectedCategories(prevCategories => {
                const newSelection = [...prevCategories, { Title: category.Title, Id: category.Id }];
                return newSelection.filter(c => !category.children?.some((child: any) => child.Id === c.Id));
            });
        }
    };

    const handleCategoryRemoval = (categoryToRemove: any) => {
        setSelectedCategories(prevCategories => {
            const removeCategoryAndChildren = (cat:any) => {
                let newSelectedCategories = prevCategories.filter(c => c.Id !== cat.Id);
                if (cat.children) {
                    cat.children.forEach((child:any) => {
                        newSelectedCategories = removeCategoryAndChildren(child);
                    });
                }
                return newSelectedCategories;
            };
            
            return removeCategoryAndChildren(categoryToRemove);
        });
    };    


    const TaxTypeCategoriesHierarchy = buildHierarchy(TaxTypeCategories);
    const menuItems: IContextualMenuItem[] = createMenuProps(TaxTypeCategoriesHierarchy).items;

    return (
        <>
            <ul className="nav nav-tabs" role="tablist">
                <li className="nav-item">
                    <a className="nav-link active" id="team-members-tab" data-bs-toggle="tab" href="#team-members" role="tab" aria-controls="team-members" aria-selected="true">TEAM MEMBERS</a>
                </li>
                <li className="nav-item">
                    <a className="nav-link" id="team-groups-tab" data-bs-toggle="tab" href="#team-groups" role="tab" aria-controls="team-groups" aria-selected="false">TEAM GROUPS</a>
                </li>
            </ul>

            <div className="tab-content">
                <div className="tab-pane fade show active" id="team-members" role="tabpanel" aria-labelledby="team-members-tab">
                    <div className='tbl-button'>
                        <button className='btn btn-primary position-relative' onClick={() => setOpenPopup(true)}>Add Team Member</button>
                    </div>
                    <div className='Alltable'>
                        <GlobalCommanTable columns={columns} data={data} callBackData={callBackData} showHeader={true} />
                    </div>
                </div>
                <div className="tab-pane fade" id="team-groups" role="tabpanel" aria-labelledby="team-groups-tab">
                    <div className='tbl-button'>
                        <button type='button' className='btn btn-primary position-relative' onClick={() => setOpenGroupPopup(true)}>Add Team Group</button>
                    </div>
                    <div className='Alltable'>
                        <GlobalCommanTable columns={columns2} data={groupData} callBackData={callBackData} showHeader={true} />
                    </div>
                </div>
            </div>

            <Panel
                headerText="Create New User"
                isOpen={openPopup}
                onDismiss={() => setOpenPopup(false)}
                isFooterAtBottom={true}
                isBlocking={!openPopup}
            >
                <div className="add-datapanel">
                    <label className='form-label mb-0 mt-2 w-100'>User Name: </label>


                    <span>
                        <input className='form-control' type="text" placeholder='Enter Title' value={title} onChange={(e: any) => { setTitle(e.target.value); autoSuggestionsForTitle(e) }} />
                        {autoSuggestData?.length > 0 ? (
                            <div>
                                <ul className="list-group">
                                    {autoSuggestData?.map((Item: any) => {
                                        return (
                                            <li
                                                className="hreflink list-group-item rounded-0 list-group-item-action"
                                                key={Item.id}
                                            // onClick={() => window.open(`${Item?.siteUrl}/SitePages/Project-Management.aspx?ProjectId=${Item?.Id}`, '_blank')}
                                            >
                                                <a>{Item.Title}</a>
                                            </li>
                                        );
                                    })}
                                </ul>
                            </div>
                        ) : null}
                    </span>


                    {/* <input className='form-control' type="text" value={title} onChange={(e: any) => setTitle(e.target.value)} /> */}
                    <DefaultButton className="btn btn-primary mt-3 p-3 shadow"
                        onClick={() => addTeamMember()}>Save</DefaultButton>
                    <DefaultButton className="btn btn-primary mt-3 p-3 shadow"
                        onClick={() => setOpenPopup(false)}>Cancel</DefaultButton>
                </div>
            </Panel>
            <Panel
                headerText="Create New Group"
                isOpen={openGroupPopup}
                onDismiss={() => setOpenGroupPopup(false)}
                isFooterAtBottom={true}
                isBlocking={!openGroupPopup}
            >
                <div className="add-datapanel">
                    <label className='form-label mb-0 mt-2 w-100'>User Name: </label>
                    <input className='form-control' type="text" value={title} onChange={(e: any) => setTitle(e.target.value)} />
                    <label className='form-label mb-0 mt-2 w-100'>Suffix: </label>
                    <input className='form-control' type="text" value={suffix} onChange={(e: any) => setSuffix(e.target.value)} />
                    <label className='form-label mb-0 mt-2 w-100'>Sort Order: </label>
                    <input className='form-control' type="text" value={sortOrder} onChange={(e: any) => setSortOrder(e.target.value)} />
                    <DefaultButton className="btn btn-primary mt-3 p-3 shadow"
                        onClick={() => addNewGroup()}>Save</DefaultButton>
                    <DefaultButton className="btn btn-primary mt-3 p-3 shadow"
                        onClick={() => setOpenGroupPopup(false)}>Cancel</DefaultButton>
                </div>
            </Panel>
            <Panel
                headerText="Update Group"
                isOpen={openUpdateGroupPopup}
                onDismiss={() => setOpenUpdateGroupPopup(false)}
                isFooterAtBottom={true}
                isBlocking={!openUpdateGroupPopup}
            >
                <div className="add-datapanel">
                    <label className='form-label mb-0 mt-2 w-100'>Title: </label>
                    <input className='form-control' type="text" defaultValue={itemToUpdate?.Title} onChange={(e: any) => setTitle(e.target.value)} />
                    <label className='form-label mb-0 mt-2 w-100'>Suffix: </label>
                    <input className='form-control' type="text" defaultValue={itemToUpdate?.Suffix} onChange={(e: any) => setSuffix(e.target.value)} />
                    <label className='form-label mb-0 mt-2 w-100'>Sort Order: </label>
                    <input className='form-control' type="text" defaultValue={itemToUpdate?.SortOrder} onChange={(e: any) => setSortOrder(e.target.value)} />
                    <label className='form-label mb-0 mt-2 w-100'>User Name:</label>

                    <DefaultButton className="btn btn-primary mt-3 p-3 shadow"
                        onClick={() => updateGroup()}>Update</DefaultButton>
                    <DefaultButton className="btn btn-primary mt-3 p-3 shadow"
                        onClick={() => setOpenUpdateGroupPopup(false)}>Cancel</DefaultButton>
                </div>
            </Panel>
            <Panel
                headerText="Update User"
                type={PanelType.custom}
                customWidth="1280px"
                isOpen={openUpdateMemberPopup}
                onDismiss={() => setOpenUpdateMemberPopup(false)}
                isFooterAtBottom={true}
                isBlocking={!openUpdateMemberPopup}
            >
                <ul className="nav nav-tabs" id="myTab" role="tablist">
                    <li className="nav-item" role="presentation">
                        <button className="nav-link active" id="basic-info-tab" data-bs-toggle="tab" data-bs-target="#basicInfo" type="button" role="tab" aria-controls="basicInfo" aria-selected="true">
                            Basic Information
                        </button>
                    </li>
                    <li className="nav-item" role="presentation">
                        <button className="nav-link" id="image-info-tab" data-bs-toggle="tab" data-bs-target="#imageInfo" type="button" role="tab" aria-controls="imageInfo" aria-selected="false">
                            Image Information
                        </button>
                    </li>
                </ul>

                <div className="tab-content" id="myTabContent">
                    {/* Basic Information Tab */}
                    <div
                        className="tab-pane fade show active"
                        id="basicInfo"
                        role="tabpanel"
                        aria-labelledby="basic-info-tab"
                    >
                        <div className="add-datapanel">
                            <label className='form-label mb-0 mt-2 w-100'>Title: </label>
                            <input className='form-control' type="text" defaultValue={memberToUpdate?.Title} onChange={(e: any) => setTitle(e.target.value)} />

                            <label className='form-label mb-0 mt-2 w-100'>Suffix: </label>
                            <input className='form-control' type="text" defaultValue={memberToUpdate?.Suffix} onChange={(e: any) => setSuffix(e.target.value)} />

                            <label className='form-label mb-0 mt-2 w-100'>User Name:</label>
                            <PeoplePicker context={context} titleText="" personSelectionLimit={1} showHiddenInUI={false}
                                principalTypes={[PrincipalType.User]} resolveDelay={1000} onChange={(items) => AssignedToUser(items)}
                                defaultSelectedUsers={email ? [email] : []} />


                            <label className='form-label mb-0 mt-2 w-100'>Group: </label>
                            <select id="sites" defaultValue={memberToUpdate?.UserGroup?.Id} onChange={(e: any) => setUserGroup(e.target.value)}>
                                <option>Select</option>
                                {TaskGroupsListData.map((elem: any) => <option value={elem?.Id}>{elem?.Title}</option>)}
                            </select>

                            <label className='form-label mb-0 mt-2 w-100'>Sort Order: </label>
                            <input className='form-control' type="text" defaultValue={memberToUpdate?.SortOrder} onChange={(e: any) => setSortOrder(e.target.value)} />

                            <label className='form-label mb-0 mt-2 w-100'>Manage Categories: </label>
                            <select id="sites" defaultValue={memberToUpdate?.TimeCategory} onChange={(e: any) => setUserCategory(e.target.value)}>
                                <option>Select</option>
                                {uniqueCategories.map((elem: any) => <option value={elem.Title}>{elem.Title}</option>)}
                            </select>

                            <label className='form-label mb-0 mt-2 w-100'>Approver:</label>
                            <PeoplePicker context={context} titleText="" personSelectionLimit={1} showHiddenInUI={false} principalTypes=
                                {[PrincipalType.User]} resolveDelay={1000} onChange={(items) => ApproverFunction(items)}
                                defaultSelectedUsers={email2 ? [email2] : []} />

                            <label className='form-label mb-0 mt-2 w-100'>Approval Type: </label>
                            <div>
                                <input type="radio" id="Approve All" name="approvalType" value="Approve All" checked={selectedApprovalType === 'Approve All'} onChange={handleApprovalTypeChange} />
                                <label htmlFor="approveAll">Approve All</label><br />
                                <input type="radio" id="Approve Selected" name="approvalType" value="Approve Selected" checked={selectedApprovalType === 'Approve Selected'} onChange={handleApprovalTypeChange} />
                                <label htmlFor="approveSelected">Approve Selected</label><br />
                                <input type="radio" id="Decide Case By Case" name="approvalType" value="Decide Case By Case" checked={selectedApprovalType === 'Decide Case By Case'} onChange={handleApprovalTypeChange} />
                                <label htmlFor="caseByCase">Case by Case</label>
                                {selectedApprovalType === "Approve Selected" ?
                                    <>
                                        <PrimaryButton text="Select Category" menuProps={{ items: menuItems }} styles={{ root: { display: 'block', width: '100%' } }} />
                                        {selectedCategories.map((category: any) => (
                                            <div key={category.Id} style={{ marginTop: '10px', display: 'flex', alignItems: 'center' }}>
                                                Selected Category: <strong>{category.Title}</strong>
                                                <Icon
                                                    iconName="Cancel"
                                                    onClick={() => handleCategoryRemoval(category)}
                                                    styles={{ root: { marginLeft: '5px', cursor: 'pointer' } }}
                                                />
                                            </div>
                                        ))}
                                    </>
                                    : ""}
                            </div>

                            <label className='form-label mb-0 mt-2 w-100'>Company: </label>
                            <div>
                                <input type="radio" id="HHHH" name="company" value="HHHH" checked={selectedCompany === 'HHHH'} onChange={handleCompanyChange} />
                                <label htmlFor="companyHHHH">HHHH Team</label><br />
                                <input type="radio" id="Smalsus" name="company" value="Smalsus" checked={selectedCompany === 'Smalsus'} onChange={handleCompanyChange} />
                                <label htmlFor="companySmalsus">Smalsus Team</label>
                            </div>

                            <label className='form-label mb-0 mt-2 w-100'>Roles: </label>
                            <div>
                                {['Component Teams', 'Service Teams'].map((role: any) => (
                                    <React.Fragment key={role}>
                                        <input type="checkbox" id={`role-${role}`} name="roles" value={role} checked={selectedRoles?.includes(role)}
                                            onChange={() => handleRoleChange(role)}
                                        />
                                        <label htmlFor={`role-${role}`}>{role}</label><br />
                                    </React.Fragment>
                                ))}
                            </div>

                            <div>
                                <input type="checkbox" id="IsActive" checked={isActive} onChange={(e) => setIsActive(e.target.checked)} />
                                <label className='form-label mb-0 mt-2 w-100'>Active User</label>
                                <input type="checkbox" id="IsTaskNotifications" checked={isTaskNotifications} onChange={(e) => setIsTaskNotifications(e.target.checked)} />
                                <label className='form-label mb-0 mt-2 w-100'>Task Notificattions</label>
                            </div>
                        </div>
                    </div>

                    {/* Image Information Tab */}
                    <div
                        className="tab-pane fade"
                        id="imageInfo"
                        role="tabpanel"
                        aria-labelledby="image-info-tab"
                    >
                        <div>
                            <ImagesC
                                EditdocumentsData={imageUrl}
                                setData={setImageUrl}
                                AllListId={TaskUserListId}
                                Context={context}
                                callBack={imageTabCallBack}
                            />
                        </div>
                    </div>
                    <DefaultButton className="btn btn-primary mt-3 p-3 shadow"
                        onClick={() => updateUser()}>Update</DefaultButton>
                    <DefaultButton className="btn btn-primary mt-3 p-3 shadow"
                        onClick={() => setOpenUpdateMemberPopup(false)}>Cancel</DefaultButton>
                </div>
            </Panel>
            <Modal
                show={showConfirmationModal}
                onHide={() => setShowConfirmationModal(false)}
                backdrop="static"
                keyboard={false}
            >
                <Modal.Header closeButton>
                    <Modal.Title>Warning</Modal.Title>
                </Modal.Header>
                <Modal.Body>Are you sure you want to delete this row?</Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowConfirmationModal(false)}>
                        Cancel
                    </Button>
                    <Button variant="primary" onClick={deleteTeamMember}>
                        Delete
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    )
}

export default TaskUserManagementTable;



// private onRenderCustomHeaderCreateNewUser = () => {
//     return (
//         <>

//             <div className='siteColor subheading'>
//                 Create New User
//             </div>
//             <Tooltip ComponentId='1757' />
//         </>
//     );
// };



{/* <label className='form-label mb-0 mt-2 w-100'>Company: </label>
                            <div>
                                <input type="radio" id="companyHHHH" name="company" value="HHHH Team" />
                                <label htmlFor="companyHHHH">HHHH Team</label><br />
                                <input type="radio" id="companySmalsus" name="company" value="Smalsus Team" />
                                <label htmlFor="companySmalsus">Smalsus Team</label>
                            </div>

                            <label className='form-label mb-0 mt-2 w-100'>Roles: </label>
                            <div>
                                <input type="checkbox" id="roleComponentTeams" name="roles" value="Component Teams" />
                                <label htmlFor="roleComponentTeams">Component Teams</label><br />
                                <input type="checkbox" id="roleServiceTeams" name="roles" value="Service Teams" />
                                <label htmlFor="roleServiceTeams">Service Teams</label><br />
                                <input type="checkbox" id="roleServiceTeams" name="roles" value="Service Teams" /> */}
{/* <label htmlFor="roleServiceTeams">Active User</label><br />
                                <input type="checkbox" id="roleServiceTeams" name="roles" value="Service Teams" />
                                <label htmlFor="roleServiceTeams">Task Notifications</label> */}
{/* </div> */ }

// AssignedToId: assignedToUser[0].id